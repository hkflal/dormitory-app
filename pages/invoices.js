import { useState, useEffect, useCallback } from 'react';
import { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, writeBatch, query, where, orderBy } from 'firebase/firestore';
import { db, storage } from '../lib/firebase';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { useAuth } from '../contexts/AuthContext';
import { useRouter } from 'next/router';
import { PlusIcon, ArrowDownTrayIcon, PencilIcon, TrashIcon, ArrowPathIcon, DocumentPlusIcon, ArrowUpOnSquareIcon } from '@heroicons/react/24/solid';
import { InformationCircleIcon, BuildingOfficeIcon, DocumentTextIcon, LinkIcon } from '@heroicons/react/24/outline';
import AddInvoiceModal from '../components/AddInvoiceModal';
import AddCTRModal from '../components/AddCTRModal';

// --- Helper Functions (moved outside the component) ---

const getInvoiceCompany = (invoice) => {
    return invoice.company || '未知公司';
};

const getStatusLabel = (status) => {
    switch (status) {
        case 'paid': return '已付款';
        case 'pending': return '待付款';
        case 'overdue': return '逾期';
        case 'deposit': return '按金/押金';
        case 'newly_signed': return '新簽約';
        default: return '未知';
    }
};

const getStatusBadge = (status) => {
    const baseClasses = "px-2 py-1 text-xs font-medium rounded-full inline-block";
    switch (status) {
        case 'paid':
            return <span className={`${baseClasses} bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300`}>已付款</span>;
        case 'pending':
            return <span className={`${baseClasses} bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300`}>待付款</span>;
        case 'overdue':
            return <span className={`${baseClasses} bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300`}>逾期</span>;
        case 'deposit':
            return <span className={`${baseClasses} bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300`}>按金/押金</span>;
        case 'newly_signed':
            return <span className={`${baseClasses} bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300`}>新簽約</span>;
        default:
            return <span className={`${baseClasses} bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300`}>未知</span>;
    }
};

const getGroupHeaderClass = (statusLabel) => {
    switch (statusLabel) {
        case '逾期':
            return 'bg-red-200 dark:bg-red-900';
        case '待付款':
            return 'bg-yellow-200 dark:bg-yellow-900';
        case '已付款':
            return 'bg-green-200 dark:bg-green-900';
        case '按金/押金':
            return 'bg-orange-200 dark:bg-orange-900';
        case '新簽約':
            return 'bg-blue-200 dark:bg-blue-900';
        default:
            return 'bg-gray-200 dark:bg-gray-700';
    }
};

const calculateTotal = (amount, nEmployees, frequency) => {
    const total = (amount || 0) * (nEmployees || 1) * (frequency || 1);
    return total;
};

const formatDate = (date) => {
    if (!date) return 'N/A';
    const dateObj = date.toDate ? date.toDate() : new Date(date);
    return dateObj.toLocaleDateString('zh-HK');
};

const formatCurrency = (amount) => amount != null ? `HK$${Number(amount).toFixed(2)}` : 'N/A';

const isCreatedThisWeek = (createdDate) => {
    if (!createdDate) return false;
    
    const date = createdDate.toDate ? createdDate.toDate() : new Date(createdDate);
    const now = new Date();
    
    // Get the start of this week (Monday)
    const startOfWeek = new Date(now);
    const day = now.getDay();
    const diff = now.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday
    startOfWeek.setDate(diff);
    startOfWeek.setHours(0, 0, 0, 0);
    
    return date >= startOfWeek;
};

// --- InvoiceCard Component (moved outside) ---

const InvoiceCard = ({
    invoice,
    groupedBy,
    generatingPdf,
    uploadingReceipt,
    updatingStatus,
    handleDownloadInvoice,
    handleUploadReceipt,
    handleStatusChange,
    openEditModal,
    handleDeleteInvoice,
    handleGenerateNewInvoice
}) => {
    const totalPrice = calculateTotal(invoice.amount, invoice.n_employees, invoice.frequency);
    const hasDocx = (invoice.docx_url && invoice.docx_url.trim() !== '') || 
                   (invoice.docxUrl && invoice.docxUrl.trim() !== '');
    const invoiceCompany = getInvoiceCompany(invoice);
    const isNewAutoGenerated = invoice.renewal_tag && isCreatedThisWeek(invoice.created_at || invoice.createdAt);

    if (invoice.status === 'newly_signed') {
        return (
            <div className="px-3 py-2 my-1 bg-white rounded shadow-sm dark:bg-gray-800 border-l-4 border-primary-500 flex items-center min-h-[56px]">
                <div className="flex-1 min-w-0 pr-2">
                    <span className="text-xs font-medium text-primary-600 truncate dark:text-primary-400 block">合約號碼: {invoice.contract_number}</span>
                    <span className="text-xs text-gray-500 dark:text-gray-400 block">{(invoice.employee_names || []).join(', ')}</span>
                    {groupedBy === 'status' && (
                        <span className="text-xs text-blue-600 dark:text-blue-400 block">公司: {invoiceCompany}</span>
                    )}
                    <span className="mt-1 block">{getStatusBadge(invoice.status)}</span>
                </div>
                <button
                    onClick={() => handleGenerateNewInvoice(invoice)}
                    className="inline-flex items-center px-2 py-1 text-xs font-medium text-white bg-primary-600 border border-transparent rounded shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    <PlusIcon className="w-4 h-4 mr-1 -ml-1" />生成首張發票
                </button>
            </div>
        );
    }

    return (
        <div className="px-3 py-2 my-1 bg-white rounded shadow-sm dark:bg-gray-800 flex items-center min-h-[56px]">
            <div className="flex-1 grid grid-cols-7 gap-2 items-center">
                <div className="flex flex-col">
                    <div className="flex items-center flex-wrap gap-1">
                        <span className="text-xs font-medium text-primary-600 truncate dark:text-primary-400">
                            {invoice.invoice_number}
                            {(invoice.is_deposit || invoice.status === 'deposit') && <span className="ml-1 text-orange-500">(押金)</span>}
                        </span>
                        {invoice.renewal_tag && (
                            <span className="text-xs text-cyan-600 bg-cyan-100 dark:bg-cyan-900 dark:text-cyan-300 px-1 py-0.5 rounded">
                                自動生成
                            </span>
                        )}
                        {isNewAutoGenerated && (
                            <span className="text-xs text-white bg-red-500 px-1 py-0.5 rounded font-medium animate-pulse">
                                NEW
                            </span>
                        )}
                    </div>
                    <span className="text-xs text-gray-500 dark:text-gray-400">{formatDate(invoice.created_at)}</span>
                </div>
                <span className="text-xs text-gray-900 dark:text-white">{invoice.contract_number}</span>
                <span className="text-xs text-gray-500 dark:text-gray-400 truncate">
                    {(invoice.employee_names || []).join(', ')}
                    {invoice.n_employees && <span className="ml-1 text-gray-400">({invoice.n_employees}人)</span>}
                </span>
                {groupedBy !== 'company' && (
                    <span className="text-xs text-blue-600 dark:text-blue-400 truncate">
                        {invoiceCompany}
                    </span>
                )}
                <div className="flex flex-col">
                    <span className="text-xs font-medium text-gray-900 dark:text-white">
                        {formatCurrency(totalPrice)}
                    </span>
                    <span className="text-xs text-gray-400">
                        {formatCurrency(invoice.amount)} × {invoice.n_employees || 1} × {invoice.frequency || 1}
                    </span>
                </div>
                <span className="text-xs text-gray-500 dark:text-gray-400">{formatDate(invoice.start_date)} ~ {formatDate(invoice.end_date)}</span>
                <span>{getStatusBadge(invoice.status)}</span>
            </div>
            <div className="flex items-center space-x-1 ml-2">
                <button 
                    onClick={() => handleDownloadInvoice(invoice)} 
                    disabled={generatingPdf === invoice.id} 
                    className="p-1 text-green-600 hover:text-green-900 disabled:opacity-50" 
                    title={hasDocx ? '下載DOCX' : '生成並下載DOCX'}
                >
                    {generatingPdf === invoice.id ? <ArrowPathIcon className="h-4 w-4 animate-spin" /> : <ArrowDownTrayIcon className="h-4 w-4" />}
                </button>
                
                {/* Upload receipt button */}
                <input 
                    type="file" 
                    id={`upload-${invoice.id}`} 
                    className="hidden" 
                    onChange={(e) => handleUploadReceipt(invoice.id, e.target.files[0])} 
                    accept="image/*,application/pdf" 
                />
                <button 
                    onClick={() => document.getElementById(`upload-${invoice.id}`).click()} 
                    disabled={uploadingReceipt === invoice.id} 
                    className="p-1 text-blue-600 hover:text-blue-900 disabled:opacity-50" 
                    title="上傳或更換收據"
                >
                    {uploadingReceipt === invoice.id ? <ArrowPathIcon className="h-4 w-4 animate-spin" /> : <ArrowUpOnSquareIcon className="h-4 w-4" />}
                </button>

                {/* View receipt button */}
                {invoice.receiptUrl && (
                    <a 
                        href={invoice.receiptUrl} 
                        target="_blank" 
                        rel="noopener noreferrer" 
                        className="p-1 text-teal-600 hover:text-teal-900" 
                        title="查看已上傳的收據"
                    >
                        <LinkIcon className="h-4 w-4"/>
                    </a>
                )}
                
                <select value={invoice.status} onChange={(e) => handleStatusChange(invoice.id, e.target.value)} disabled={updatingStatus[invoice.id]} className="text-xs border-gray-300 dark:border-gray-600 rounded focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white">
                    <option value="pending">待付款</option>
                    <option value="paid">已付款</option>
                    <option value="overdue">逾期</option>
                    <option value="deposit">按金/押金</option>
                </select>
                <button onClick={() => openEditModal(invoice)} className="p-1 text-gray-600 hover:text-gray-900" title="編輯">
                    <PencilIcon className="h-4 w-4" />
                </button>
                <button onClick={() => handleDeleteInvoice(invoice.id)} className="p-1 text-red-600 hover:text-red-900" title="刪除">
                    <TrashIcon className="h-4 w-4" />
                </button>
            </div>
        </div>
    );
};


// --- Main Page Component ---

const InvoicesPage = () => {
    const { currentUser, login } = useAuth();
    const router = useRouter();
    const [invoices, setInvoices] = useState([]);
    const [loading, setLoading] = useState(true);
    const [groupedBy, setGroupedBy] = useState('status');
    const [showAddModal, setShowAddModal] = useState(false);
    const [editingInvoice, setEditingInvoice] = useState(null);
    const [updatingStatus, setUpdatingStatus] = useState({});
    const [generatingPdf, setGeneratingPdf] = useState(null);
    const [showInfoModal, setShowInfoModal] = useState(false);
    const [infoModalMessage, setInfoModalMessage] = useState('');
    const [searchTerm, setSearchTerm] = useState("");
    const [ctrInput, setCtrInput] = useState("");
    const [uploadingReceipt, setUploadingReceipt] = useState(null);
    const [showOnlyAutoGenerated, setShowOnlyAutoGenerated] = useState(false);
    const [showCTRModal, setShowCTRModal] = useState(false);

    const fetchInvoices = useCallback(async () => {
        if (!currentUser) {
            setLoading(false);
            return;
        }
        setLoading(true);
        try {
            const invoicesRef = collection(db, 'invoices');
            const invoicesSnapshot = await getDocs(invoicesRef);
            let invoicesData = invoicesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const batch = writeBatch(db);
            let updatesMade = 0;

            invoicesData = invoicesData.map(invoice => {
                let endDate = invoice.end_date;
                if (endDate && endDate.toDate) endDate = endDate.toDate();
                else if (endDate) endDate = new Date(endDate);

                if (endDate && invoice.status === 'pending' && endDate < today) {
                    const invoiceRef = doc(db, 'invoices', invoice.id);
                    batch.update(invoiceRef, { status: 'overdue' });
                    updatesMade++;
                    return { ...invoice, status: 'overdue' };
                }
                return invoice;
            });

            if (updatesMade > 0) await batch.commit();
            setInvoices(invoicesData);
        } catch (error) {
            console.error('Error fetching invoices:', error);
        } finally {
            setLoading(false);
        }
    }, [currentUser]);

    useEffect(() => {
        fetchInvoices();
    }, [fetchInvoices]);
    
    const handleAddOrUpdateInvoice = async (invoiceData) => {
        try {
            if (invoiceData.id) {
                const invoiceRef = doc(db, 'invoices', invoiceData.id);
                await updateDoc(invoiceRef, invoiceData);
            } else {
                await addDoc(collection(db, 'invoices'), invoiceData);
            }
            fetchInvoices(); // Refresh
        } catch (error) {
            console.error('Error saving invoice:', error);
        }
    };

    const groupInvoices = (invoices) => {
        return invoices.reduce((acc, invoice) => {
            const key = getStatusLabel(invoice.status);
            if (!acc[key]) acc[key] = [];
            acc[key].push(invoice);
            return acc;
        }, {});
    };

    const openEditModal = (invoice) => {
        setEditingInvoice(invoice);
        setShowAddModal(true);
    };

    const handleNavigateToDetail = () => {
        if (ctrInput.trim()) {
            router.push(`/invoice-detail/${ctrInput.trim()}`);
        } else {
            alert('請輸入合約號碼');
        }
    };

    const handleGenerateNewInvoice = async (contractPlaceholder) => {
        alert('Invoice generation feature needs to be implemented. Please create invoices manually for now.');
    };

    const handleDownloadInvoice = async (invoice) => {
        if (!invoice || generatingPdf === invoice.id) return;
        setGeneratingPdf(invoice.id);
        try {
            const docxUrl = invoice.docx_url || invoice.docxUrl;
            if (docxUrl) {
                window.open(docxUrl, '_blank');
                return;
            }

            // Fallback to generation if no URL
            const response = await fetch(`/api/generate-invoice-docx-manual?invoiceId=${invoice.id}`);
            if (!response.ok) throw new Error(await response.text());
            
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${invoice.invoice_number}.docx`;
            document.body.appendChild(a);
            a.click();
            a.remove();
            window.URL.revokeObjectURL(url);
            fetchInvoices();

        } catch (error) {
            console.error('Error downloading invoice:', error);
            setInfoModalMessage(`下載發票時發生錯誤: ${error.message}`);
            setShowInfoModal(true);
        } finally {
            setGeneratingPdf(null);
        }
    };

    const handleUploadReceipt = async (invoiceId, file) => {
        if (!currentUser) {
            alert("Please log in to upload receipts.");
            return;
        }
        if (!file) return;
        setUploadingReceipt(invoiceId);
        try {
            // Use a consistent file name to ensure replacement, preserving the extension
            const fileExtension = file.name.split('.').pop();
            const storageRef = ref(storage, `receipts/${invoiceId}/receipt.${fileExtension}`);
            const uploadResult = await uploadBytes(storageRef, file);
            const downloadURL = await getDownloadURL(uploadResult.ref);

            const invoiceRef = doc(db, 'invoices', invoiceId);
            await updateDoc(invoiceRef, { receiptUrl: downloadURL });

            setInvoices(prevInvoices =>
                prevInvoices.map(inv => inv.id === invoiceId ? { ...inv, receiptUrl: downloadURL } : inv)
            );
        } catch (error) {
            console.error("Error uploading receipt: ", error);
            alert("Upload failed. Please try again.");
        } finally {
            setUploadingReceipt(null);
        }
    };

    const handleStatusChange = async (invoiceId, newStatus) => {
        if (updatingStatus[invoiceId]) return;
        setUpdatingStatus(prev => ({ ...prev, [invoiceId]: true }));
        try {
            const invoiceRef = doc(db, 'invoices', invoiceId);
            await updateDoc(invoiceRef, { status: newStatus });
            setInvoices(prevInvoices =>
                prevInvoices.map(inv => inv.id === invoiceId ? { ...inv, status: newStatus } : inv)
            );
        } catch (error) {
            console.error('Failed to update status', error);
        } finally {
            setUpdatingStatus(prev => ({ ...prev, [invoiceId]: false }));
        }
    };

    const handleDeleteInvoice = async (invoiceId) => {
        if (window.confirm('Are you sure you want to delete this invoice?')) {
            try {
                await deleteDoc(doc(db, 'invoices', invoiceId));
                setInvoices(invoices.filter(i => i.id !== invoiceId));
            } catch (error) {
                console.error('Failed to delete invoice', error);
            }
        }
    };

    const handleCTRCreated = () => {
        // Refresh the page or data after CTR is created
        setInfoModalMessage('合約創建成功！您現在可以為此合約創建發票。');
        setShowInfoModal(true);
    };

    if (loading && invoices.length === 0) {
        return <div className="min-h-screen flex items-center justify-center">Loading invoices...</div>;
    }

    if (!currentUser) {
        // A simple login form can be shown here if needed, or just a message.
        return <div className="min-h-screen flex items-center justify-center">Please log in to view invoices.</div>;
    }

    const filteredInvoices = invoices.filter(invoice => {
        // Filter for auto-generated
        if (showOnlyAutoGenerated && !invoice.renewal_tag) {
            return false;
        }

        const searchTermLower = searchTerm.toLowerCase();
        if (!searchTermLower) return true; // if no search term, and it passed auto-gen filter, show it

        return (
            (invoice.invoice_number && invoice.invoice_number.toLowerCase().includes(searchTermLower)) ||
            (invoice.contract_number && invoice.contract_number.toLowerCase().includes(searchTermLower)) ||
            (invoice.employee_names && invoice.employee_names.join(', ').toLowerCase().includes(searchTermLower)) ||
            (getInvoiceCompany(invoice).toLowerCase().includes(searchTermLower))
        );
    });

    const grouped = groupInvoices(filteredInvoices);
    const sortedGroupKeys = Object.keys(grouped).sort((a, b) => {
        const order = ['新簽約', '逾期', '待付款', '已付款'];
        return order.indexOf(a) - order.indexOf(b);
    });

    return (
        <div className="p-4 sm:p-6 lg:p-8">
            <div className="sm:flex sm:items-center sm:justify-between mb-6">
                <div>
                    <h1 className="text-2xl font-bold text-gray-900 dark:text-white">發票管理</h1>
                    <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">查看、編輯和追蹤所有發票的狀態。</p>
                </div>
                <div className="mt-4 sm:mt-0 sm:ml-16 sm:flex-none flex items-center space-x-2">
                    <button onClick={() => setShowAddModal(true)} className="bg-primary-600 text-white px-4 py-2 rounded-md shadow-sm hover:bg-primary-700 flex items-center focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 h-9">
                        <DocumentPlusIcon className="h-5 w-5 mr-2" />
                        新增發票
                    </button>
                    <button onClick={() => setShowCTRModal(true)} className="bg-green-600 text-white px-4 py-2 rounded-md shadow-sm hover:bg-green-700 flex items-center focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 h-9">
                        <PlusIcon className="h-5 w-5 mr-2" />
                        New CTR
                    </button>
                    <div className="flex items-stretch">
                        <input type="text" value={ctrInput} onChange={(e) => setCtrInput(e.target.value)} placeholder="輸入合約號碼" className="block w-32 border-gray-300 dark:border-gray-600 rounded-l-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm dark:bg-gray-700 dark:text-white px-3 py-2 h-9" />
                        <button onClick={handleNavigateToDetail} className="bg-primary-600 text-white px-4 py-2 rounded-r-md shadow-sm hover:bg-primary-700 flex items-center focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 h-9">跳轉</button>
                    </div>
                </div>
            </div>
            <div className="flex items-center space-x-4 mb-4">
                <div className="flex-1 max-w-sm">
                    <input type="text" placeholder="搜索發票號碼, 合約號, 員工..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white" />
                </div>
                <div className="flex items-center">
                    <input
                        id="auto-generated-filter"
                        type="checkbox"
                        checked={showOnlyAutoGenerated}
                        onChange={(e) => setShowOnlyAutoGenerated(e.target.checked)}
                        className="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                    />
                    <label htmlFor="auto-generated-filter" className="ml-2 block text-sm text-gray-900 dark:text-gray-300">
                        只顯示自動生成
                    </label>
                </div>
            </div>

            {sortedGroupKeys.map(group => (
                <div key={group} className="mb-6">
                    <div className={`w-full text-left px-4 py-2 text-lg font-semibold rounded-t-lg ${getGroupHeaderClass(group)}`}>
                        {group} ({grouped[group].length})
                    </div>
                    <div className="border border-t-0 border-gray-200 dark:border-gray-700 rounded-b-lg p-2 bg-gray-50 dark:bg-gray-900">
                        {grouped[group].map(invoice => (
                            <InvoiceCard 
                                key={invoice.id} 
                                invoice={invoice} 
                                groupedBy={groupedBy}
                                generatingPdf={generatingPdf}
                                uploadingReceipt={uploadingReceipt}
                                updatingStatus={updatingStatus}
                                handleDownloadInvoice={handleDownloadInvoice}
                                handleUploadReceipt={handleUploadReceipt}
                                handleStatusChange={handleStatusChange}
                                openEditModal={openEditModal}
                                handleDeleteInvoice={handleDeleteInvoice}
                                handleGenerateNewInvoice={handleGenerateNewInvoice}
                            />
                        ))}
                    </div>
                </div>
            ))}
            
            {showAddModal && (
                <AddInvoiceModal
                    isOpen={showAddModal}
                    onClose={() => { setShowAddModal(false); setEditingInvoice(null); }}
                    onSave={handleAddOrUpdateInvoice}
                    invoiceData={editingInvoice}
                />
            )}
            
            {showCTRModal && (
                <AddCTRModal
                    isOpen={showCTRModal}
                    onClose={() => setShowCTRModal(false)}
                    onSave={handleCTRCreated}
                />
            )}
            
             {showInfoModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl text-center">
                        <InformationCircleIcon className="h-12 w-12 text-primary-500 mx-auto mb-4"/>
                        <p className="mb-4">{infoModalMessage}</p>
                        <div className="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                            <button onClick={() => setShowInfoModal(false)} className="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700">關閉</button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default InvoicesPage; 