const admin = require('firebase-admin');

// Initialize Firebase Admin
const serviceAccount = require('../serviceAccountKey.json');

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}

const db = admin.firestore();

async function checkAutoGeneratedInvoices() {
  console.log('🔍 Checking auto-generated invoices...');
  
  try {
    // Get all auto-generated invoices
    const autoInvoicesSnapshot = await db.collection('invoices')
      .where('auto_generated', '==', true)
      .get();
    
    console.log(`📊 Found ${autoInvoicesSnapshot.size} auto-generated invoices`);
    
    if (autoInvoicesSnapshot.empty) {
      console.log('ℹ️  No auto-generated invoices found');
      return;
    }
    
    let withDocx = 0;
    let withoutDocx = 0;
    let withError = 0;
    
    const invoicesWithoutDocx = [];
    
    autoInvoicesSnapshot.forEach(doc => {
      const data = doc.data();
      const hasDocxUrl = data.docx_url && data.docx_url.trim() !== '';
      const hasDocxUrlLegacy = data.docxUrl && data.docxUrl.trim() !== '';
      const hasError = data.docx_generation_error || data.docx_generation_status === 'failed';
      
      if (hasDocxUrl || hasDocxUrlLegacy) {
        withDocx++;
      } else {
        withoutDocx++;
        invoicesWithoutDocx.push({
          id: doc.id,
          invoice_number: data.invoice_number,
          contract_number: data.contract_number,
          created_at: data.created_at,
          docx_generation_status: data.docx_generation_status,
          docx_generation_error: data.docx_generation_error,
          auto_generated: data.auto_generated
        });
      }
      
      if (hasError) {
        withError++;
      }
    });
    
    console.log('\n📈 Summary:');
    console.log(`✅ With DOCX URL: ${withDocx}`);
    console.log(`❌ Without DOCX URL: ${withoutDocx}`);
    console.log(`🚨 With generation errors: ${withError}`);
    
    if (invoicesWithoutDocx.length > 0) {
      console.log('\n📋 Invoices without DOCX URL:');
      invoicesWithoutDocx.forEach(invoice => {
        console.log(`  - ${invoice.invoice_number} (${invoice.id})`);
        console.log(`    Contract: ${invoice.contract_number}`);
        console.log(`    Created: ${invoice.created_at?.toDate?.()?.toLocaleString() || 'Unknown'}`);
        console.log(`    Status: ${invoice.docx_generation_status || 'Not set'}`);
        if (invoice.docx_generation_error) {
          console.log(`    Error: ${invoice.docx_generation_error}`);
        }
        console.log('');
      });
    }
    
    // Check if any invoices need manual regeneration
    if (withoutDocx > 0) {
      console.log('🔧 Recommended actions:');
      console.log('1. Check Firebase Functions logs for any errors during auto-generation');
      console.log('2. Verify templates exist in functions/templates/ directory');
      console.log('3. Run manual regeneration for invoices without DOCX files');
      
      console.log('\n💡 To manually regenerate, you can call:');
      console.log('POST https://your-function-url/regenerateInvoiceDocx');
      console.log('Body: { "invoiceIds": ["invoice_id_1", "invoice_id_2", ...] }');
      
      // Show sample regeneration call
      const sampleIds = invoicesWithoutDocx.slice(0, 3).map(inv => `"${inv.id}"`);
      if (sampleIds.length > 0) {
        console.log('\nSample call for first few invoices:');
        console.log(`{
  "invoiceIds": [${sampleIds.join(', ')}]
}`);
      }
    }
    
  } catch (error) {
    console.error('❌ Error checking auto-generated invoices:', error);
  }
}

async function fixAutoGeneratedInvoices() {
  console.log('🔧 Attempting to fix auto-generated invoices without DOCX...');
  
  try {
    // Get auto-generated invoices without DOCX URLs
    const autoInvoicesSnapshot = await db.collection('invoices')
      .where('auto_generated', '==', true)
      .get();
    
    const invoicesNeedingFix = [];
    
    autoInvoicesSnapshot.forEach(doc => {
      const data = doc.data();
      const hasDocxUrl = data.docx_url && data.docx_url.trim() !== '';
      const hasDocxUrlLegacy = data.docxUrl && data.docxUrl.trim() !== '';
      
      if (!hasDocxUrl && !hasDocxUrlLegacy) {
        invoicesNeedingFix.push({
          id: doc.id,
          ...data
        });
      }
    });
    
    if (invoicesNeedingFix.length === 0) {
      console.log('✅ All auto-generated invoices have DOCX files');
      return;
    }
    
    console.log(`🔧 Found ${invoicesNeedingFix.length} invoices needing DOCX generation`);
    
    // Update each invoice to trigger regeneration
    // We'll add a field that can trigger the function to re-run
    const batch = db.batch();
    
    invoicesNeedingFix.forEach(invoice => {
      const invoiceRef = db.collection('invoices').doc(invoice.id);
      batch.update(invoiceRef, {
        docx_regeneration_requested: admin.firestore.FieldValue.serverTimestamp(),
        docx_generation_status: 'pending'
      });
    });
    
    await batch.commit();
    
    console.log(`✅ Marked ${invoicesNeedingFix.length} invoices for DOCX regeneration`);
    console.log('⏳ The Firebase Function should pick these up and generate DOCX files');
    console.log('💡 Check back in a few minutes to see if DOCX URLs are populated');
    
  } catch (error) {
    console.error('❌ Error fixing auto-generated invoices:', error);
  }
}

// Run the check
if (require.main === module) {
  (async () => {
    await checkAutoGeneratedInvoices();
    
    console.log('\n🤔 Would you like to attempt to fix invoices without DOCX? (y/n)');
    // For now, just run the check. In a real scenario, you'd add user input handling
    console.log('💡 To fix, run: await fixAutoGeneratedInvoices()');
  })();
}

module.exports = { checkAutoGeneratedInvoices, fixAutoGeneratedInvoices }; 